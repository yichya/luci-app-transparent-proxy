#!/bin/sh
#
# Copyright (C) 2014-2017 Jian Chang <aa65535@live.com>
# Copyright (C) 2017 Ian Li <OpenSource@ianli.xyz>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

usage() {
	cat <<-EOF
		Usage: transparent-proxy-rules [options]

		Valid options are:

		    -l <local_port>         port number of local transparent proxy server
		    -B <ip_list_file>       a file whose content is bypassed ip list
		    -b <wan_ips>            wan ip of will be bypassed
		    -W <ip_list_file>       a file whose content is forwarded ip list
		    -w <wan_ips>            wan ip of will be forwarded
		    -I <interface>          proxy only for the given interface
		    -d <target>             the default target of lan access control
		    -a <lan_hosts>          mac addr of access control, need a prefix to define proxy type
		    -f                      flush the rules
		    -h                      show this help message and exit
EOF
	exit $1
}

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st transparent-proxy-rules[$$] -p$1 $2
}

flush_rules() {
	iptables-save -c | grep -v "TP_SPEC" | iptables-restore -c
	if command -v ip >/dev/null 2>&1; then
		ip rule del fwmark 251 lookup 251 2>/dev/null
		ip route del local default dev lo table 252 2>/dev/null
		ip rule del fwmark 252 lookup 252 2>/dev/null
		ip route del local default dev lo table 252 2>/dev/null
	fi
	for setname in $(ipset -n list | grep "tp_spec"); do
		ipset destroy $setname 2>/dev/null
	done
	FWI=$(uci get firewall.transparent_proxy.path 2>/dev/null)
	[ -n "$FWI" ] && echo '# firewall include file' >$FWI
	return 0
}

ipset_init() {
	ipset -! restore <<-EOF || return 1
		create tp_spec_src_ac hash:mac hashsize 64
		create tp_spec_src_bp hash:mac hashsize 64
		create tp_spec_src_fw hash:mac hashsize 64
		create tp_spec_dst_sp hash:net hashsize 64
		create tp_spec_dst_bp hash:net hashsize 64
		create tp_spec_dst_fw hash:net hashsize 64
		create tp_spec_def_gw hash:net hashsize 64
		$(gen_lan_host_ipset_entry)
		$(gen_special_purpose_ip | sed -e "s/^/add tp_spec_dst_sp /")
		$(sed -e "s/^/add tp_spec_dst_bp /" ${WAN_BP_LIST:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_BP_IP; do echo "add tp_spec_dst_bp $ip"; done)
		$(sed -e "s/^/add tp_spec_dst_fw /" ${WAN_FW_LIST:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_FW_IP; do echo "add tp_spec_dst_fw $ip"; done)
EOF
	DEFAULT_GATEWAY=$(ip route | grep default | awk '{print $3}')
	ipset add tp_spec_def_gw $(ip route | grep $DEFAULT_GATEWAY | awk '{print $9}')
	return 0
}

ipt_mangle() {
	if !(lsmod | grep -q TPROXY && command -v ip >/dev/null); then
		loger 4 "TPROXY or ip not found."
		return 0
	fi
	ip rule add fwmark 251 lookup 251
	ip route add local default dev lo table 251
	include_ac_rules
	iptables -t mangle -A TP_SPEC_WAN_FW -p tcp -j TPROXY --on-port $local_port --tproxy-mark 251
	iptables -t mangle -A TP_SPEC_WAN_FW -p udp -j TPROXY --on-port $local_port --tproxy-mark 251
	return $?
}

ipt_mangle_output() {
	if !(lsmod | grep -q TPROXY && command -v ip >/dev/null); then
		loger 4 "TPROXY or ip not found."
		return 0
	fi
	ip rule add fwmark 252 lookup 252
	ip route add local default dev lo table 252
	iptables -t mangle -N TP_SPEC_WAN_DG
	iptables -t mangle -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
	iptables -t mangle -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_bp dst -j RETURN
	iptables -t mangle -A TP_SPEC_WAN_DG -m set --match-set tp_spec_def_gw dst -j RETURN
	iptables -t mangle -A TP_SPEC_WAN_DG -m mark --mark 255 -j RETURN
	iptables -t mangle -A TP_SPEC_WAN_DG -p tcp -j MARK --set-mark 252
	iptables -t mangle -A TP_SPEC_WAN_DG -p udp -j MARK --set-mark 252
	iptables -t mangle -A OUTPUT -j TP_SPEC_WAN_DG
	iptables -t mangle -I PREROUTING 1 -m mark --mark 252 -j TP_SPEC_WAN_AC
	return $?
}

export_ipt_rules() {
	[ -n "$FWI" ] || return 0
	cat <<-CAT >>$FWI
	iptables-save -c | grep -v "TP_SPEC" | iptables-restore -c
	iptables-restore -n <<-EOF
	$(iptables-save | grep -E "TP_SPEC|^\*|^COMMIT" | sed -e "s/^-A \(PREROUTING\)/-I \1 1/")
	EOF
CAT
	return $?
}

gen_lan_host_ipset_entry() {
	for host in $LAN_HOSTS; do
		case "${host:0:1}" in
			n|N)
				echo add tp_spec_src_ac ${host:2}
				;;
			b|B)
				echo add tp_spec_src_bp ${host:2}
				;;
			g|G)
				echo add tp_spec_src_fw ${host:2}
				;;
		esac
	done
}

gen_special_purpose_ip() {
	cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.31.196.0/24
		192.52.193.0/24
		192.88.99.0/24
		192.168.0.0/16
		192.175.48.0/24
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
EOF
}

include_ac_rules() {
	iptables-restore -n <<-EOF
	*mangle
	:TP_SPEC_LAN_DG - [0:0]
	:TP_SPEC_LAN_AC - [0:0]
	:TP_SPEC_WAN_AC - [0:0]
	:TP_SPEC_WAN_FW - [0:0]
	-A TP_SPEC_LAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
	-A TP_SPEC_LAN_DG -p tcp -j TP_SPEC_LAN_AC
	-A TP_SPEC_LAN_DG -p udp -j TP_SPEC_LAN_AC
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_bp src -j RETURN
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_fw src -j TP_SPEC_WAN_FW
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_ac src -j TP_SPEC_WAN_AC
	-A TP_SPEC_LAN_AC -j ${LAN_TARGET:=TP_SPEC_WAN_AC}
	-A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_fw dst -j TP_SPEC_WAN_FW
	-A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_bp dst -j RETURN
	-A TP_SPEC_WAN_AC -j TP_SPEC_WAN_FW
	$(gen_prerouting_rules)
	COMMIT
EOF
}

gen_prerouting_rules() {
	[ -z "$IFNAMES" ] && echo -I PREROUTING 1 -j TP_SPEC_LAN_DG
	for ifname in $IFNAMES; do
		echo -I PREROUTING 1 -i $ifname -j TP_SPEC_LAN_DG
	done
}

while getopts ":s:l:S:L:B:b:W:w:I:d:a:e:oOuUfh" arg; do
	case "$arg" in
		l)
			local_port=$OPTARG
			;;
		B)
			WAN_BP_LIST=$OPTARG
			;;
		b)
			WAN_BP_IP=$OPTARG
			;;
		W)
			WAN_FW_LIST=$OPTARG
			;;
		w)
			WAN_FW_IP=$OPTARG
			;;
		I)
			IFNAMES=$OPTARG
			;;
		d)
			LAN_TARGET=$OPTARG
			;;
		a)
			LAN_HOSTS=$OPTARG
			;;
		f)
			flush_rules
			exit 0
			;;
		h)
			usage 0
			;;
	esac
done

[ -z "$local_port" ] && usage 2

flush_rules && ipset_init && ipt_mangle && ipt_mangle_output && export_ipt_rules
RET=$?
[ "$RET" = 0 ] || loger 3 "Start failed!"
exit $RET

